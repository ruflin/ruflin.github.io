<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Quality | Ruflin]]></title>
  <link href="http://ruflin.com/blog/categories/quality/atom.xml" rel="self"/>
  <link href="http://ruflin.com/"/>
  <updated>2014-06-19T08:48:23+02:00</updated>
  <id>http://ruflin.com/</id>
  <author>
    <name><![CDATA[@ruflin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Measuring your software quality standards must be easy]]></title>
    <link href="http://ruflin.com/2014/06/13/measuring-your-software-quality-standards-must-be-easy/"/>
    <updated>2014-06-13T09:19:37+02:00</updated>
    <id>http://ruflin.com/2014/06/13/measuring-your-software-quality-standards-must-be-easy</id>
    <content type="html"><![CDATA[<p>Quality in Software projects is important, as already elaborated upon in the previous post, <a href="/2014/06/10/quality-in-software-projects-matters-from-day-one/">it matters from day one</a>. But as long as measuring and running quality metrics isn&rsquo;t easy, it will be hard to follow through with quality.</p>

<p>For almost all programming languages there are tons of tools to run unit tests, check the code complexity or measure the code coverage. The easiest way to get these tools into your project is on day one. The longer you wait, the harder it gets to implement them. There will be dependencies which are not compatible, running the tests doesn&rsquo;t work because you use a different folder structure and lots of other issues. The tools you choose to measure the quality will also influence the way you structure your project and your code. And I think this is good, as in most cases this leads to better structured code and less dependencies in the code which has lots of other advantages.</p>

<h2>Setup and Build Tools</h2>

<p>Installing the tools is not enough, it must also be easy to execute them and to get the metrics out. Otherwise, it is likely that you won&rsquo;t use it and in case you share your project, others won&rsquo;t use it. There are different tools out there such as <a href="http://en.wikipedia.org/wiki/Make_(software)">Makefiles</a>, <a href="http://ant.apache.org/">Ant</a>, <a href="http://maven.apache.org/">Maven</a>, <a href="http://gruntjs.com/">Grunt</a> and others, which allow you to automate running your tests or to get the code coverage. Pick the tool which is best for you and your project. For all tools, the execution should be just one command, such as <code>make coverage</code> in order to get the test coverage.</p>

<p>Not only running the tools must be automated, but also the setup of the tools. In case you have different dependencies in your project that are needed to build the test coverage, make sure that the setup of your project is also as simple as <code>make setup</code>. There are also lots of dependency managers out there that automate the installation of the dependencies for you, such as <a href="http://bundler.io/">Bundler</a>, <a href="https://packagist.org/">Packagist</a> or <a href="https://pypi.python.org/pypi/pip">Pip</a>. If you want to make it even nicer, make sure that your build script runs also <code>make setup</code> in case you run <code>make coverage</code> and some depenencies are missing &hellip;</p>

<p>To have these simple commands in place will make it very easy for you to run the quality metrics as often as possible. But also whenever new engineers join the project, with just one command they can start contributing to your project. If you don&rsquo;t have these kind of scripts in place, you will spend a lot of time with every single engineer who joins the project. And in case some dependencies change, others don&rsquo;t know how to get to the right setup again. This will not only cost you a lot of time, but it will also lead to frustration on all sides. To draw the analogy to building a car: Not having the script is like lending your car to someone else, but before the person is able to start driving, they either need a two-hour crash course from you or they need to read the full manual, because in your car, the accelerator is actually on the left side and the breaks are on the steering wheel. The next time the person will borrow your car, you changed the breaks to the left side and the whole process starts anew. If it is that hard to lend your car, you will not lend it to someone and the same is true for your code. If it is very hard for others to work with your code, you will not share it and they will not want to work with it.</p>

<h2>Run it locally</h2>

<p>It is crucial that all your quality measurements can be executed locally. How can you make sure your code is good enough if you can&rsquo;t test it locally? When you have to commit your code to a build server first, which runs all the tasks and gives you feedback after several minutes / hours that you actually have one typo in a test, you will stop writing tests, since otherwise it will slow you down. In addition, I think &ldquo;broken&rdquo; code should never make it into a shared repository / branch, as otherwise you will not only break your own code, but everyone else&rsquo;s, and your code will block the whole team. To draw the car analogy again: You implement a new break system in your car and also put it into the car the test team uses. After one week you realise that no test team is left, since all of them died in car accidents due to the breaks that didn&rsquo;t work. You didn&rsquo;t expect them to already use the breaks, since they were not finished / tested by yourself, but unfortunately they were testing the accelartor in the car which was ready for testing. Presumably your fellow engineers won&rsquo;t die because of broken code, but frustration is guaranteed.</p>

<p>Make sure you and your team members can run all the metrics on your local machine and have it as close to the production system as possible. The best is to use a virtual environment with a clean setup. Tools such as <a href="http://www.vagrantup.com/">Vagrant</a> or <a href="http://www.docker.com/">Docker</a> can make your life much easier. Do not run the code on your local machines, since normally every engineer has some special environment variables or tools installed on his computer. This can either get all the quality metrics to pass but then they fail on another system, or it can do the opposite. A simple example here is for all the engineers who develop on OS X. By default, OS X has a case insensitive file system. On the other hand, Linux, which most servers run on, does not. So in case you include the file <code>image.png</code> but it is actually called <code>Image.png</code>, it will probably work on your local machine but not on the production server. Run your code in a very simliar environment to the production in order to make sure it works. And again, make sure the setup of this virtual environment is automated so everyone in your team will use it.</p>

<h2>Conclusion</h2>

<p>In the optimal case, you would not even have to run your quality metrics. Instead, they would run every time you change your code and immediately give you direct feedback. There are tools such as <a href="https://github.com/mynyml/watchr">watchr</a> which are intended for continuous testing and which run the tests every time you change the code. Having feedback for your code as fast as possible is crucial in order to produce better code. Tests should not slow down your development but speed it up. Make sure that setting up your project and running your quality metrics is fully automated and that it happens as fast as possible. If your tests take a day to execute, no one will ever run the tests except your continuous integration system over night. This would mean the feedback cycle is one day long, which will make sure that you get a maximum of 365 feedbacks per year.</p>

<h2>Links</h2>

<ul>
<li><a href="http://martinfowler.com/articles/continuousIntegration.html">Continuous Integration</a> by <a href="http://www.martinfowler.com/">Martin Fowler</a></li>
<li><a href="https://www.youtube.com/watch?v=n04Xgv9aXg4">Vagrant, Packer, Serf: Maximum Potency DevOps</a> by <a href="https://twitter.com/mitchellh">Mitchell Hashimoto</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quality in software projects matters from day one]]></title>
    <link href="http://ruflin.com/2014/06/10/quality-in-software-projects-matters-from-day-one/"/>
    <updated>2014-06-10T20:43:14+02:00</updated>
    <id>http://ruflin.com/2014/06/10/quality-in-software-projects-matters-from-day-one</id>
    <content type="html"><![CDATA[<p>As I see <a href="http://en.wikipedia.org/wiki/Software_quality">quality in software</a> as one of the most important features when building software, I will dedicate my next blog posts on software quality and quality standards. For most non-engineers, quality in software projects is something very abstract. I will therefore now and then make comparisons to building a car, since most people are more famliar with cars and objects they can actually touch and feel. My first post will be about why it matters to get quality into your software project from day one.</p>

<p>Quality in software projects is a topic that lots of engineers talk about and also embrace. I rarely witness discussions where engineers argue against the importance of quality. The only situation where the question of quality might be an issue is when talking about building a prototype or writing the first lines of code of a project. Should you have quality standards in your prototype? Should you start your project already with tests?</p>

<h2>Software runs multiple times</h2>

<p>My answer to this is: If you plan to run your software multiple times, you should. If you build a prototype for example during a hackathon that only needs to run once, perhaps you can build it without including some basic tests. But even in this situation, I belive that having some basic quality measures in your code will prevent nasty surprises during your presentation.</p>

<p>The beautiful thing about software is that it normally not only runs once, but can be executed thousands or millions of times without additional costs (except server costs). If you build software that is only executed once, why would you even build it? That is why quality standards also matter in your prototype. Your prototype will be executed lots of times and will go through various iterations. A prototype will have lower quality standards than a production system. To draw the comparison to building a car here: The first time you build a new car, you will not test 100 times if the blinker works as expected, but you will make sure that the breaks actually work. The same for your prototype, make sure you have at least tested the core functionality.</p>

<h2>Proto-duction</h2>

<p>More than once I have witnessed a prototype actually making it into production, the so-called <a href="http://blog.codinghorror.com/new-programming-jargon/">Proto-duction</a>. No, this should not happen, but if you start shipping your prototype and actual real users start to use it, it is very hard to convince the users and your business unit that you have to start from scratch again because you didn&rsquo;t plan this software to actually be for users. If we make the comparison with the car again, we shippped it to the user and made sure the accelarator actually works as expected, as this is the first things users test, but we didn&rsquo;t put much thought into how the breaks are applied if the car actually is going down and not on a flat street. Depending on how bad your &ldquo;break&rdquo; issue in your sofware is, perhaps it makes sense to take it away from your users again and build it from scratch.</p>

<h2>Conclusion</h2>

<p>To prevent Proto-Duction issues, get quality in your software projects from day one and make sure your quality is easily measured. More on how to make measuring your quality easy in the next post.</p>
]]></content>
  </entry>
  
</feed>
